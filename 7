# Ортогонализация Грама-Шмидта
import sys

def Ortogonalizazya(a):
    b = [[0] * len(a) for i in range(len(a))]
    b[0] = a[0]
    for i in range(1, len(a)):
        sum = a[i]
        for j in range(0, i):
            ab = 0
            bb = 0
            proyekzya = [i for i in range(len(a))]
            for n in range(len(a)):
                ab += b[j][n] * a[i][n]
                bb += b[j][n] * b[j][n]
            for n in range(len(a)):
                if bb!= 0:
                    proyekzya[n] = (ab / bb) * b[j][n]
                else:
                        sys.exit('Кринж')
            for n in range(len(a)):
                sum[n] -= proyekzya[n]
        b[i] = sum
    return b

# Да, это алгоритм из интернета, на оригинальность не претендую

rowsA = int(input("введите число векторов "))
A = []
print('Вводите числа через пробел, для перехода на новую строку, нажмите enter')
for _ in range(rowsA):
    elem = [float(i) for i in input().split()]
    A.append(elem)
    
# Проверка матрицы на адекватность
for i in range(len(A)):
    if len(A[0]) != len(A[i]):
        sys.exit('у вас строки разной длины...')
if len(A)!= len(A[0]):
    sys.exit('матрица должна быть квадратной...')

print("Что было: ", A)
print("Что стало:", Ortogonalizazya(A))
