#
include < iostream > #include < ctime > #include < clocale > #include < cmath > #include < Windows.h >
  using namespace std;
int * * create_matrix(int k, int s) {
  int * * N = new int * [k];
  for (int i = 0; i < k; i++) {
    N[i] = new int[s];
  }
  return N;
}
double * * create_matrix_double(int k, int s) {
  double * * N = new double * [k];
  for (int i = 0; i < k; i++) {
    N[i] = new double[s];
  }
  return N;
}
void input_matrix_double(double * * N, int k, int s) {
  setlocale(0, "");
  SetConsoleCP(866);
  SetConsoleOutputCP(866);
  for (int i = 0; i < k; i++) {
    for (int j = 0; j < s; j++) {
      cout« "Put there element with index(UKAZITE ELEMENT) ="«
      i + 1« j + 1« endl;
      cin» N[i][j];
    }
  }
}
double Det2(double * * arr) {
  return arr[0][0] * arr[1][1] - arr[0][1] * arr[1][0];
}
int main() {
  setlocale(LC_ALL, "RUS");
  srand((unsigned) time(NULL));
  setlocale(0, "");
  int k, s, a, b, c, D, x1, x2, y1, y2, y3, y4;
  cout« "VVEDI RAZMER"«
  endl;
  cin» k» s;
  double * * arr = create_matrix_double(k, k);
  input_matrix_double(arr, k, k);
  a = 1;
  b = -1 * (arr[0][0] + arr[1][1]);
  c = arr[0][0] * arr[1][1] - arr[0][1] * arr[1][0];
  D = pow(b, 2) - 4 * a * c;
  x1 = (-b + sqrt(D)) / (2 * a);
  x2 = (-b - sqrt(D)) / (2 * a);
  int det1 = (arr[0][0] - x1) * (arr[1][1] - x1) - arr[0][1] * arr[1][0];
  int det2 = (arr[0][0] - x2) * (arr[1][1] - x2) - arr[0][1] * arr[1][0];
  if ((arr[0][1] == 0) and(arr[1][0] == 0)) {
    if (arr[0][0] != x1) {
      y1 = 0;
      y2 = rand() % 100;
    }
    if (arr[1][1] != x1) {
      y1 = rand() % 100;
      y2 = 0;
    }
    if (arr[0][0] != x2) {
      y3 = 0;
      y4 = rand() % 100;
    }
    if (arr[1][1] != x2) {
      y3 = rand() % 100;
      y4 = 0;
    }
  }
  if ((arr[0][1] != 0) and(arr[1][0] != 0)) {
    y1 = 0;
    y2 = 0;
    y3 = 0;
    y4 = 0;
  }
  cout« x1« "["«
  y1« " "«
  y2« "]"«
  endl;
  cout« x2« "["«
  y3« " "«
  y4« "]"«
  endl;
  return 0;
}
